#!/opt/homebrew/bin/bash

# check commit message
## master branch
### - not empty
function checkEmpty() {
  local type="$1"
  local value="$2"

  if [[ -z "$value" ]];  then
    echo "$type is empty"
    exit 1
  fi
}

### - is lower case
function checkLowercase() {
  local type="$1"
  local value="$2"
  local value_to_lower_case
  value_to_lower_case=$(echo "$value" | tr '[:upper:]' '[:lower:]')

  if [[ "$value_to_lower_case" != "$value" ]]; then
    echo "$type is not lower case"
    echo "value = $value"
    exit 1
  fi
}

### - include type
function includeInTypes() {
  local value="$1"
  local types_array=(feature bugfix ci config refactor test docs)

  if [[ ! "${types_array[*]}" =~ ${value} ]]; then
    echo "Unknown type"
    echo "value = $value"
    exit 1
  fi
}

## other branches
### - validate task number
function validateTaskNumber() {
  local value=$1

  local regexp="^\[CALC-[0-9]+\]$"
  if [[ ! "$value" =~ $regexp ]]; then
    echo "The issue number is not specified correctly"
    echo "value = $value"
    echo "need format CALC-[0-9]+"
    exit 1
  fi
}

### - max length
function checkMaxLength() {
  local type="$1"
  local max_length="$2"
  local value="$3"

  if [[ "${#value}" -gt "$max_length" ]]; then
    echo "$type is longer than the maximum length ($max_length)"
    echo "value = $value"
    exit 1
  fi
}

branch_name=$(git rev-parse --abbrev-ref HEAD)
commit_message_from_file=$(cat "$1")

if [[ "$branch_name" == "master" ]]; then
  # variables
  task_number=$(echo "$commit_message_from_file" | awk -F' ' '{print $1}')
  type=$(echo "$commit_message_from_file" | awk -F'] ' '{print $2}' | awk -F'(' '{print $1}')
  scope=$(echo "$commit_message_from_file" | awk -F'(' '{print $2}' | awk -F')' '{print $1}')
  message=$(echo "$commit_message_from_file" | awk -F': ' '{print $2}')

  # checking
  ## TASK NUMBER
  validateTaskNumber "$task_number"

  ## TYPE
  checkEmpty "TYPE" "$type"
  includeInTypes "$type"

  ## SCOPE
  checkEmpty "SCOPE" "$scope"
  checkLowercase "SCOPE" "$scope"

  ## SUBJECT
  checkEmpty "SUBJECT" "$message"
  checkLowercase "SUBJECT" "$message"
  checkMaxLength "SUBJECT" 125 "$message"
else
  if [[ "${commit_message_from_file:0:1}" == "[" ]]; then
    mapfile -t message_chunks < <( echo "$commit_message_from_file" | tr ' ' '\n' )
    tail=$(IFS=" " ; echo "${message_chunks[*]:1}")
    validateTaskNumber "${message_chunks[0]}"
  else
    tail=$commit_message_from_file
    task_number=$(git rev-parse --abbrev-ref HEAD | tr "/" " " | tr "_" " " | awk '{ print $2 }')
    new_message="[$task_number] $commit_message_from_file"
    sed -i "" -e "1s/.*/$new_message/" "$1"
  fi

  ### checking
  checkEmpty "BODY" "$tail"
  checkMaxLength "COMMIT" 125 "$commit_message_from_file"
fi

### lint and prettier checks
npm run pre-commit
